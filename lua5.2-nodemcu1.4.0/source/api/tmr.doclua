-------------------------------------------------------------------------------
-- Timer Functions.
-- @module tmr


-------------------------------------------------------------------------------
-- This is a convenience function combining tmr.register() and tmr.start() into a single call.
-- To free up the resources with this timer when done using it, call tmr.unregister() on it.
-- @function [parent=#tmr] alarm
-- @param #number id timer id (0-6)
-- @param #number interval_ms timer interval in milliseconds. Maximum value is 6870947
-- @param #number mode timer mode (ALARAM_SINGLE, ALARM_SEMI, ALARM_AUTO)
-- @param function
-- @return Returns true if the timer was started, false on error.

-------------------------------------------------------------------------------
-- Busyloops the processor for a specified number of microseconds.
-- This is in general a bad idea, because nothing else gets to run, and the networking stack (and other things) can fall over as a result.
-- @function [parent=#tmr] delay
-- @param #number us microseconds to busyloop for
-- @return #nil

-------------------------------------------------------------------------------
-- Returns the system counter, which counts in microseconds.
-- This is in general a bad idea, because nothing else gets to run, and the networking stack (and other things) can fall over as a result.
-- Limited to 31 bits, after that it wraps around back to zero.
-- @function [parent=#tmr] now
-- @return #number the current value of the system counter

-------------------------------------------------------------------------------
-- Starts or restarts a previously configured timer.
-- @function [parent=#tmr] start
-- @param #number id timer id (0-6)
-- @return #boolean true if the timer was started, false on error

-------------------------------------------------------------------------------
-- Stops a running timer, but does not unregister it.
-- A stopped timer can be restarted with tmr.start().
-- @function [parent=#tmr] stop
-- @param #number id timer id (0-6)
-- @return #boolean true if the timer was stopped, false on error

-------------------------------------------------------------------------------
-- Configures a timer and registers the callback function to call on expiry.
-- To free up the resources with this timer when done using it, call tmr.unregister() on it.
-- @function [parent=#tmr] register
-- @param #number id timer id (0-6)
-- @param #number interval_ms timer interval in milliseconds. Maximum value is 6870947
-- @param #number mode timer mode (ALARAM_SINGLE, ALARM_SEMI, ALARM_AUTO)
-- @param function
-- @return #nil

-------------------------------------------------------------------------------
-- Stops the timer (if running) and unregisters the associated callback.
-- This isn't necessary for one-shot timers (tmr.ALARM_SINGLE), as those automatically unregister themselves when fired.
-- @function [parent=#tmr] unregister
-- @param #number id timer id (0-6)
-- @return #nil

-------------------------------------------------------------------------------
-- Timer mode: ALARM_AUTO automatically repeating alarm.
-- Returns 1
-- @field [parent=#tmr] #number ALARM_AUTO

-------------------------------------------------------------------------------
-- Timer mode: ALARM_SINGLE a one-shot alarm (and no need to call tmr.unregister()).
-- Returns 0
-- @field [parent=#tmr] #number ALARM_SINGLE

-------------------------------------------------------------------------------
-- Timer mode: ALARM_SEMI manually repeating alarm (call tmr.start() to restart).
-- Returns 2
-- @field [parent=#tmr] #number ALARM_SEMI

return nil
